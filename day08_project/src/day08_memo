패키지 ( Package )
	윈도우 에서의 폴더와 같음.
	다른 폴더에서는 같은 이름의 파일을 생성가능.

다른패키지에 작성된 클래스사옹
	---> import 문 으로 사용해준다.
	---> import java.util.* 			<< util 밑에 모든것을 쓰겠다는 의미
							별(*) 표시는 전체를 의미함	
							
주요 패키지
	java.lang / java.util / java.io / ( java.awt / javax.swing ) 등등..	
							
==============================================================================

Object 클래스

	모든 클래스의 슈퍼 클래스 ( 최상위 클래스 )
	
	
toString() 오버 라이딩

	-> 객체를 문자열로 리턴하는 toString 을 작성해준다.
	
객체 비교 equals()

	-> 이친구도 오버라이딩 해서 많이 쓴다.
	
	public boolean equals(Object obj) {
		Point p = (Point) obj;
		if(x == obj.x && y == obj ){
			return true;
		} else {
			return false;
	}

==============================================================================

Wrapper 클래스

	-> 기본 타입의 값을 객체로 다룰수 있게 함!! (중요)
	-> Wrapper인 클래스는 존재 하진 않음
	-> int -> Integer / char -> Character / double -> Double	// int 빼곤 다 앞에 대문자 붙히면됨.
	
	객체타입.valueOf(값)

박싱 & 언박싱

	박스(boxing) - 기본 타입의 값을 Wrapper 객체로 변환
	언박싱(Unboxing) - Wrapper 객체에 들어잇는 기본 타입의 값을 빼내는 것.	
	
	Integer ten = 10;  이렇게만 해도 자동 박싱이됨.
	int n = ten; 	자동으로 언박싱 됨( int n = ten.intValue() )
	
	
Integer 클래스의 주요 메소드			
	 parseInt()		굉장히 중요함!!
			ex) Integer.parseInt(문자열 값)		<- parseInt 은 static 메소드라서 바로 Integer.parseInt() 로 표현가능

==============================================================================

String 클래스

String의 특징과 객체 생성
	-> String 은 클래스다 java.lang.String
	-> 리터럴로 쓸때랑 객체생성으로 쓸때랑 저장 공간이 달라진다.
	
	String을 리터널로 생성  ---> String s = "Hello"
	
	String을 객체로 생성 ---> String t = new String("Hello")
		- 힙 메모리에 String 객체 생성

	문자열 비교할땐 절대로 리터럴 끼리 비교하지말고, equals() 로 비교해라

String의 주요 메소드들
	
	concat() --> String 객체 서로서로를 붙혀준다는 의미.		// concat()은 완전 새로운 객체를 생성시킴.
	compareTo()  -->  문자열의 사전 순서대로 비교
			사전에 먼저 나오면 양수리턴 , 사전에 나중에 나오면 음수리턴 , 문자열이 같으면 0
	length() --> 문자열의 길이
	subString() --> 문자열 n번째 부터 쭉 나열 시켜줌.
	charAt()  -- > 문자열의 특정 위치의 char 값을 가져올수있다.	// index 기준으로
	trim() --> 문자열의 공백을 제거함.
	
	이외에 많은 메소가있음.. 구글링으로 찾는 연습도 해라.   ex ) 자바 특정한 값 ...

==============================================================================
 
StringBuffer 클래스
	-> 가변 = 변할수 있다는 뜻
	-> 문자열 사이에 문자열을 넣을수있는 장점이있다. insert()
	StringBuffer append()  --> concat() 이랑 비슷하다. 이어붙힌다는 개념.
	
	insert() / replace() / delete() / setLength() 등등
	
==============================================================================

StringTokenizer 클래스
	-> String 클래스의 split() 메소드랑 같은거.
	ex) StringTokenizer st = new StringTokenizer(객체 변수, 문자열내 구분하려는 값);
													문자열내 구분하려는값은 여러개도 가능하다. "&=|,." 이런 식으로.
													
	countTokens()
	hasMoreTokens()  이걸 많이씀!!!!
	
==============================================================================

Math 클래스

	-> 모든 메소드는 static타입 : 클래스 이름으로 바로 호출해야함.
	
	round() --> 반올림	
	max()  -->  최대값
	min()  --> 최소값
	random() --> (int)Math.random()*100 + 1		< -- 1 부터 100 까지
	
==============================================================================

Calendar 클래스

	-> 날짜나 시간 같은 정보 저장 관리.
			이친구도 0부터 시작하기때문에 +1 을 해줘야한다.
			
	Calendar now = Calendar.getInstance();		// 이렇게 선언해주고 시작함 // 싱글톤 을 사용하는 클래스 
	
	int year = now.get(Calendar.YEAR);		<- now 에 년도가 저장된다.
	int year = now.get(Calendar.MONTH) + 1;		<- now 에 몇월인지 저장된다.
	
	
==============================================================================

제네릭 ( Generic )
	-> 클래스를 만들때 타입을 선언할수있다.
	-> MyClass <T> <- 타입을 의미
	
	-> 선언을 하기전 뭐로 레퍼런스 타입을 줄지 모를때, 객체 생성할때 선언해주려고 씀.
	-> 기본 데이터 타입은 안됨. ( int , double, char 등등)
	-> Integer , String, Double 이런걸로 써준다. ( 참조형 타입 )
	
	E : element
	T : type
	V : value
	
==============================================================================
	
	
컬렉션 ( Collection )
	-> 배열이랑 비슷하다 (리스트 같은거임)
	-> 배열처럼 담아서 관리함, 가변의 크기로서 객체의 수를 염려할 필요가 없다.
	-> 연결리스트를 쉽게 할수있음.
	-> 객체들의 컨테이너라고도 함
	-> 고정 크기의 배열의 단점을 해소
	
	제네릭 스택 -> Stack <E>
		인스턴스 생성할때 정수형을 관리하고 싶으면 <Integer > 문자를 관리하고 싶으면 <String>	
		
	
Vector <E>
	-> 여러 객체들을 삽입, 삭제, 검색하는 컨테이너 클래스
	
	Vector <Integer> v = new Vector <Integer>();  // 숫자를 관리하는 Vector 컬렉션.
	
	-> add() 메소드로 값을 추가시킬수있다.
	-> get() 메소드로 값을 호출시킬수있다.
	add() , clear() , get() , indexOf() , remove() 등등등
	
	auto boxing 이 되기때문에 Wrapper 클래스로 캐스팅 안해줘도됨.

	-> v.apapcity(); <- 용량을 따로 설정을 안해주면 기본적으로 10을 준다.

	-> Vector <Point> v = new Vector <Point>(); // 이렇게도 쓸수있음. //	<-- Point 를 관리하는 Vector 컬렉션
	
ArrayList <E>
	-> Vector 랑 거의~ 비슷함. 근데 메소드명이 조금씩 다름.
	
	ArrayList <String> al = new ArrayList <String>();	// 문자열을 관리하는 ArrayList 컬렉션
	
HashMap <K,V>
	-> key 키 , value 값의 쌍으로 구성되는 요소를 다루는 컬렉션.		(한 쌍으로 이뤄져 있음)
	-> K 는 키로 사용할 요소의 타입, V는 값으로 사용할 요소의 타입 지정	( K 는 보통 String, V 는 보통 Object 를 씀)
	-> 값을 검색하려면 반드시 키를 이용한다.
	
	put() -> 삽입	(중요)
	get() -> 검색	
	containsKey() -> 지정된 키를 갖고있으면 true 리턴
	
	
	ArrayList<HashMap<String,Object>> list = new ArrayList<HashMap<String,Object>> (); // 이런식으로도 사용가능.
	
	map -> {name : "홍길동" , math : 90, eng : 85, kor : 95, addr : "서울"}    <<== 중괄호안에 이런형태로 이루어져있다.
	
	list -> [{name : "홍길동" , math : 90, eng : 85, kor : 95, addr : "서울"}
			, {name : "김철수" , math : 80, eng : 45, kor : 55, addr : "인천"}]		<<== 대괄호안에 이런형태로 이루어져있다.
			
				==> 이런 형식을 json 형식이라고 한다.
		
	json 검색해서 찾아봐라
